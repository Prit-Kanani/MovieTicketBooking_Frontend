@model List<Movie_management_system.DTOs.ScreenDTO>
@{
    ViewBag.Title = "Screens List";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/Admin/Admin_Screen.css" />
    <link rel="stylesheet" href="~/css/Admin/Admin_button.css" />
}

<div class="container mt-4">
    <div class="mb-3">
        <!-- Animated Back Button -->
        <a asp-area="Admin" asp-controller="Theatre" asp-action="Index" class="btn-go-back">
            <div class="bar">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024">
                    <path d="M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z"></path>
                    <path d="m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z"></path>
                </svg>
            </div>
            <span class="btn-text">Go Back</span>
        </a>
    </div>

    <h2>@ViewBag.Title</h2>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <div class="d-flex align-items-center">
            <input type="text" id="searchInput" class="form-control" placeholder="Search by screen number..." />
        </div>

        <div class="action-btns">
            <a asp-area="Admin" asp-controller="Screen" asp-action="AddOrEdit" class="btn btn-primary" id="addBtn">Add Screen</a>
            <button class="btn btn-danger" id="deleteToggleBtn">Delete</button>
            <!-- removed hidden-checkbox class here -->
            <button class="btn btn-secondary" id="cancelBtn">Cancel</button>
        </div>
    </div>

    <form id="screenForm">
        <table class="table table-bordered table-hover" id="screenTable">
            <thead class="table-dark">
                <tr>
                    <!-- use a specific class for delete column -->
                    <th class="delete-col">Select</th>
                    <th>Screen No</th>
                    <th>Total Seats</th>
                    <th>Shows</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Count; i++)
                {
                    var screen = Model[i];
                    <tr>
                        <td class="delete-col">
                            <input type="checkbox" class="selectBox" value="@screen.ScreenId" />
                        </td>
                        <!-- show actual ScreenNo instead of JS serial -->
                        <td class="screen-no-cell">@screen.ScreenNo</td>
                        <td>@screen.TotalSeats</td>
                        <td>@screen.ShowTimes</td>
                        <td>
                            <a asp-area="Admin" asp-controller="Screen" asp-action="AddOrEdit" asp-route-id="@screen.ScreenId" asp-route-theatreId="@ViewBag.TheatreId" class="btn btn-sm btn-warning">Edit</a>
                            <a asp-area="Admin" asp-controller="Showtime" asp-action="Index" asp-route-id="@screen.ScreenId" class="btn btn-sm btn-info">Details</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </form>
</div>

@section Scripts {
    <script>
        const searchInput   = document.getElementById("searchInput");
        const deleteBtn     = document.getElementById("deleteToggleBtn");
        const cancelBtn     = document.getElementById("cancelBtn");
        const checkboxes    = document.querySelectorAll(".selectBox");
        const deleteCols    = document.querySelectorAll(".delete-col");

        window.addEventListener("DOMContentLoaded", () => {
            // hide delete-selection column & cancel button by default
            cancelBtn.style.display = "none";
            deleteCols.forEach(col => col.style.display = "none");
        });

        // Search by Screen No (matches your placeholder)
        searchInput.addEventListener("keyup", function () {
            const filter = searchInput.value.toLowerCase();
            const rows = document.querySelectorAll("#screenTable tbody tr");

            rows.forEach(row => {
                const screenNo = row.querySelector(".screen-no-cell")?.innerText.toLowerCase() ?? "";
                row.style.display = screenNo.includes(filter) ? "" : "none";
            });
        });

        // Toggle delete mode / perform delete if items selected
        deleteBtn.addEventListener("click", async () => {
            const selectedIds = Array.from(checkboxes)
                .filter(cb => cb.checked)
                .map(cb => parseInt(cb.value));

            // If nothing selected, reveal selection UI
            const selectionHidden = getComputedStyle(deleteCols[0]).display === "none";
            if (selectionHidden && selectedIds.length === 0) {
                deleteCols.forEach(col => col.style.display = "table-cell");
                cancelBtn.style.display = "inline-block";
                showToast("Select screens to delete.");
                return;
            }

            if (selectedIds.length === 0) {
                showToast("No screens selected.");
                return;
            }

            try {
                const response = await fetch('/Admin/Screen/Delete', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(selectedIds)
                });

                if (response.ok) {
                    showToast("Screen(s) deleted successfully!");
                    window.location.reload();
                } else {
                    showToast("Failed to delete screens.");
                }
            } catch (err) {
                console.error(err);
                showToast("Error deleting screens.");
            }
        });

        // Cancel just resets the page state
        cancelBtn.addEventListener("click", () => window.location.reload());

        // Optional: log selected IDs
        checkboxes.forEach(box => {
            box.addEventListener("change", () => {
                const selectedIds = Array.from(checkboxes)
                    .filter(cb => cb.checked)
                    .map(cb => parseInt(cb.value));
                console.log("Selected IDs:", selectedIds);
            });
        });

        function showToast(message) {
            let toast = document.createElement("div");
            toast.innerText = message;
            toast.style.position = "fixed";
            toast.style.bottom = "20px";
            toast.style.right = "20px";
            toast.style.backgroundColor = "#333";
            toast.style.color = "#fff";
            toast.style.padding = "10px 20px";
            toast.style.borderRadius = "5px";
            toast.style.zIndex = 1000;
            document.body.appendChild(toast);

            setTimeout(() => toast.remove(), 3000);
        }
    </script>
}
